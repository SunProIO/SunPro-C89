= 工作 ~NFCタグを貼ったドアを部屋の照明のスイッチにする~

本題です。

実は数カ月前に引っ越しをしまして、それに伴い部屋の構造や机なども変えたのですが、概ね快適と言えるものの、部屋のLED照明のスイッチが割りと押しにくい感じになってしまいました。

//image[around-switch][照明のスイッチ周りの状況]

そこで、「@<strong>{部屋のドアをスイッチ代わりにすればいいんじゃね?!?!}」と思いついたので、実行しました。
ドアが開いてるか閉じてるかを判定するのに、NFCタグを使うことにしました。くっついていなくても、タグとリーダーが数cm以内にあれば良いので、動くものの状態判定には最適ですね!

(※発想自体についてはわかりませんが、必要なことについては特に新規性はないです。)

== 構想の概要

    * 部屋のドアにNFCタグを貼り付け、そのすぐ近くの棚にNFCリーダーを置いておく。
    * タグが離れた状態から近づいた状態になったとリーダーが感知した時、フラグの値を変更する。
    * フラグがTrueの時はLED照明をオンに、Falseの時はオフにする。
    * LED照明のオン/オフは、Raspberry PiのGPIOピンに接続された赤外線LEDへの電流をオン/オフすることによって行う。

要するに、@<strong>{ドアが閉まるたびに電気をつけたり消したりする}、ということです。

とりあえず準備したらこうなりました。

//image[result][配置の結果]

ブレッドボード部分を延ばしているのは、赤外線LEDが天井に向くようにするためです。

めっちゃ「なんとかした」感が強くてあまりスマートに見えませんが、まあ動くからいいでしょう(適当)

以下、やったことです。

== 照明を操作する

==={room} 必要なもの

    * Raspberry Pi (上記と同じなので省略)
    * 赤外線LED
    * 赤外線受光器
    * ブレッドボード、ジャンパワイヤ

==={room} 環境構築

lircをインストールします。

//cmd{
sudo apt-get install lirc
//}

使用するGPIOピン番号を決めます。僕は今回、入力を20、出力を21としました。

決めた通りに配線します。

//image[wiring][配線]

/etc/lirc/hardware.conf を以下のように編集します:

//emlistnum[][text]{
# /etc/lirc/hardware.conf
#
# Arguments which will be used when launching lircd
LIRCD_ARGS="--uinput"

#Don't start lircmd even if there seems to be a good config file
#START_LIRCMD=false

#Don't start irexec, even if a good config file seems to exist.
#START_IREXEC=false

#Try to load appropriate kernel modules
LOAD_MODULES=true

# Run "lircd --driver=help" for a list of supported drivers.
DRIVER="default"
# usually /dev/lirc0 is the correct setting for systems using udev
DEVICE="/dev/lirc0"
MODULES="lirc_rpi"

# Default configuration files for your hardware if any
LIRCD_CONF=""
LIRCMD_CONF=""
//}

次に、lircモジュールを追加します。
(@<strong>{やや古い資料では /etc/modules に追加する方法が見つかりますが、仕様変更により以下の方法でないと失敗するようになったので、気をつけてください!})

@<tt>{/boot/config.txt} に以下の1行を追加します:

//emlist[][text]{
dtoverlay=lirc-rpi, gpio_in_pin=20, gpio_out_pin=21
//}

再起動してモジュールを有効にします:

//cmd{
sudo reboot
//}

以下のコマンドを実行して、 lirc_rpi, lirc_dev, rc_core が表示されたら成功です。

//cmd{
lsmod | grep lirc
//}

以下のコマンドを入力したあと、受光器にリモコンを向けボタンを押し、リモコンコードを受信できているか確認します:

//cmd{
sudo /etc/init.d/lirc stop
sudo mode2 -d /dev/lirc0
//}

=== LED照明のリモコンの記憶

次のコマンドを実行して、出てきた英文に従ってセットアップを済ませます:

//cmd{
sudo irrecord -n -d /dev/lirc0 room-led
//}

ちょっとわかりにくい感じの文でしたがまあ頑張って登録を済ませました(適当)。

ちなみに、こんな感じの @<tt>{room-led.conf} が生成されます。

//emlistnum[][text]{
# Please make this file available to others
# by sending it to <lirc@bartelmus.de>
#
# this config file was automatically generated
# using lirc-0.9.0-pre1(default) on Wed Dec 23 19:15:29 2015
#
# contributed by
#
# brand:                       room-led.conf
# model no. of remote control:
# devices being controlled by this remote:
#

begin remote

  name  room-led.conf
  bits           16
  flags SPACE_ENC|CONST_LENGTH
  eps            30
  aeps          100

  header       9087  4503
  one           594  1661
  zero          594   546
  ptrail        592
  repeat       9087  2247
  pre_data_bits   16
  pre_data       0x41B6
  gap          108695
  toggle_bit_mask 0x0

      begin codes
          on                       0x659A
          off                      0x7D82
      end codes

end remote
//}

こいつをデフォルトの設定ファイルとされている @<tt>{/etc/lirc/lircd.conf} に追記します。

//cmd{
sudo sh -c "cat room-led.conf > /etc/lirc/lircd.conf"
//}

=== LED照明のコントロール

//cmd{
irsend SEND_ONCE room-led.conf off
irsend SEND_ONCE room-led.conf on
//}

これで電気が消えたりついたりしました! あとはNFCタグと組み合わせるだけです!!

====[column] Connection refusedされたときは

//emlistnum[][python]{
irsend: could not connect to socket
irsend: Connection refused
//}

とか言われたら、lircdが動いていないということなので、 @<code>{sudo systemctl restart lircd.service} してあげましょう!

僕はこれで長時間つまづきまくっていて、危うく原稿出せなくなるところでした…

====[/column]

== NFCタグ認識によるフラグの管理

前述の構想から、ドアが閉まるたび、つまりNFCタグがリーダーに認識されるたびにフラグ( @<tt>{should_on} )の値を更新すれば良さそうです。

@<tt>{nfc.clf} モジュールの @<tt>{connect} は、 @<tt>{terminate} オプションで関数を指定された時、「タグが認識されるか、指定された関数がTrueを返すとき、終了する」という振る舞いをします。( @<href>{http://nfcpy.readthedocs.org/en/latest/modules/clf.html#nfc.clf.ContactlessFrontend.connect, 公式ドキュメント} 参照)

タグが離れた時に終了する、といった便利なメソッドは残念ながら用意されていなかったので、各秒について、前秒( @<tt>{was_door_closed} )は開いていて、現在の秒( @<tt>{is_door_closed} )は閉まっている状態、つまりたった今閉じられた状態に、フラグ( @<tt>{should_on} )を更新する、といった挙動をさせました。

//emlistnum[][python]{
import nfc
import time

clf = nfc.ContactlessFrontend('usb')

was_door_closed = False
is_door_closed = False
should_on = False

while True:
    was_door_closed = is_door_closed
    is_door_closed = False

    after1s = lambda : time.time() - started > 1
    started = time.time()
    clf.connect(rdwr={'on-connect': connected}, terminate=after1s)
    if is_door_closed == True and was_door_closed == False:
        if should_on == True:
            should_on = False
            # Turn on the switch.
        else:
            should_on = True
            # Turn off the switch.
//}

== 完成品

前述のフラグ( @<tt>{should_on} )を関数に渡して、関数内でon/offさせれば良さそうです。
on/offは、Python側でシェルのコマンドを実行させるのが最も楽だと思いましたので、そうしました。

//emlistnum[][python]{
import nfc
import subprocess
import time
import sys

clf = nfc.ContactlessFrontend('usb')

was_door_closed = False
is_door_closed = False
should_on = False

def change_led_value(flag):
    if flag == True:
        subprocess.call('irsend SEND_ONCE room-led.conf on', shell=True)
        print 'turned on'
    else:
        subprocess.call('irsend SEND_ONCE room-led.conf off', shell=True)
        print 'turned off'

def connected(tag):
    global is_door_closed
    is_door_closed = True

atexit.register(finished)

while True:
    was_door_closed = is_door_closed
    is_door_closed = False

    after1s = lambda : time.time() - started > 1
    started = time.time()
    clf.connect(rdwr={'on-connect': connected}, terminate=after1s)
    if is_door_closed == True and was_door_closed == False:
        if should_on == True:
            should_on = False
            change_led_value(should_on)
        else:
            should_on = True
            change_led_value(should_on)
//}

完成です!!

//cmd{
nohup python nfced-room.py &
//}

でバックグラウンド実行するなりして運用したいと思います。

== 感想

部屋を出る時に必ず電気が消えるため、電気の消し忘れもなくなり、なかなか便利になるのではないかと思います。(現在原稿提出の締め切り直前なので、まだ運用歴ないです…)

NFCタグの技術的な感想としては、セットアップは面倒でしたが、実装は易しかったので、今後は色々手を広げたいなぁという感じです。

せっかくだし、NPCAの部誌もNFC関連でやっちゃおうかなあと思っています(1つアイデアがある)。5/2-3の文化祭にてオンラインで公開されるので、その際はぜひ御覧ください!!(宣伝)
